---
- name: Configure Backup NAS 1
  hosts: banas1
  gather_facts: true
  become: true


  tasks:
      - name: Set timezone
        community.general.timezone:
          name: "{{ timezone }}"

      - name: Enable passwordless sudo for {{ ansible_user }}
        copy:
          dest: "/etc/sudoers.d/{{ ansible_user }}"
          content: "{{ ansible_user }} ALL=(ALL) NOPASSWD:ALL"
          owner: root
          group: root
          mode: 0440
          validate: /usr/sbin/visudo -csf %s

      - name: Upload SSH public key from localhost
        ansible.posix.authorized_key:
          user: "{{ ansible_user }}"
          state: present
          # key: "{{ lookup('file', lookup('env','HOME') + '/.ssh/id_rsa.pub') }}" # lookup key file in home dir of current user
          key: "{{ lookup('file', hostvars['localhost'].ssh_pub_key_path) }}"
          exclusive: yes  # remove all other non-specified keys from the authorized_keys file
        notify: 
          - Restart sshd

      - name: Configure root SSH access
        lineinfile:
          path: /etc/ssh/sshd_config
          regexp: "^PermitRootLogin"
          line: "PermitRootLogin {{ sshd_permit_root_login }}"
          state: present
        notify: 
          - Restart sshd

      - name: Configure SSH password authentication
        lineinfile:
          path: /etc/ssh/sshd_config
          regexp: "^PasswordAuthentication"
          line: "PasswordAuthentication {{ sshd_password_authentication }}"
          state: present
        notify: 
          - Restart sshd


      - name: Install additional packages
        ansible.builtin.apt:
          name: 
            - postfix         # Message Transfer Agend (MTA) for logging cronjob output
            - samba
            - acl
            - btrbk           # btrfs snapshot utility
            - util-linux      # for RTC wake
            - screen
            - smartmontools   # SMART test etc.
          state: present


      - name: Upgrade packages
        ansible.builtin.apt:
          update_cache: yes
          upgrade: yes

      # Workaround to prevent disk spin down
      - name: Add periodic disk read operation to the cron tab
        ansible.builtin.cron:
          name: "Periodic disk read operation"
          minute: "*/9"
          user: root
          job: "dd if=/dev/sda of=/dev/null bs=512 count=1 iflag=direct"
      
      
      - name: Create a rsync group
        ansible.builtin.group:
          name: rsync
          state: present

      - name: Generate a user for the rsync connection
        ansible.builtin.user:
          name: "{{ rsync_user }}"
          groups: rsync
          shell: /bin/bash
          create_home: yes
          generate_ssh_key: yes
          ssh_key_type: rsa
          ssh_key_bits: 3072
          ssh_key_file: .ssh/id_rsa
          force: no # yes: overwrites existing key

      - name: Enable passwordless sudo for "{{ rsync_user }}"
        copy:
          dest: "/etc/sudoers.d/{{ rsync_user }}"
          content: "{{ rsync_user }} ALL=(ALL) NOPASSWD:ALL"
          owner: root
          group: root
          mode: 0440
          validate: /usr/sbin/visudo -csf %s

      - name: Ensure the volume is mounted
        ansible.posix.mount:
          path: "{{ mount_point }}"
          src: "UUID={{ ansible_local['disk']['uuid']}}"
          fstype: "{{ filesystem_type }}"
          opts: defaults
          boot: true # mount on boot
          state: mounted


      - name: Set ownership and permissions for the mounted drive
        ansible.builtin.file:
          path: "{{ mount_point }}"
          owner: root
          group: root
          mode: "0775"

      - name: Ensure directory path for btrfs subvolumes exists
        ansible.builtin.file:
          path: "{{ (mount_point ~ '/' ~ item) | dirname }}"
          state: directory
          owner: root
          group: root
          mode: '0775'
        loop: "{{ btrfs_subvolumes }}"

      - name: Create btrfs subvolumes
        community.general.btrfs_subvolume:
          name: "{{ item }}"
        loop: "{{ btrfs_subvolumes }}"

      - name: Set ownership and permissions for btrfs subvolumes
        ansible.builtin.file:
          path: "{{ mount_point }}/{{ item }}"
          owner: root
          group: root
          mode: "0775"
        loop: "{{ btrfs_subvolumes }}"

      - name: Ensure remounting of btrfs volume after suspend
        tags: remount-service
        block:
          - name: Create systemd service to remount after suspend
            copy:
              dest: /etc/systemd/system/remount-after-suspend.service
              owner: root
              group: root
              mode: '0644'
              content: |
                [Unit]
                Description=Remount volume after suspend
                After=suspend.target
                ConditionPathExists={{ mount_point }}

                [Service]
                Type=oneshot
                ExecStart=/bin/bash -c 'sleep 40 && mount --uuid {{ ansible_local['disk']['uuid'] }} {{ mount_point }}'
                ExecStartPost=/bin/sleep 2

                [Install]
                WantedBy=suspend.target

          - name: Reload systemd to pick up new service
            command: systemctl daemon-reload

          - name: Enable the remount service
            systemd:
              name: remount-after-suspend.service
              enabled: true


      - name: Upload rsync job script
        tags: upload_script_rsync
        ansible.builtin.template:
          src: ../templates/banas1/rsync_pull_job.sh.j2
          dest: /usr/local/bin/rsync_pull_job.sh
          owner: "{{ rsync_user }}"
          group: rsync
          mode: '0770'

      - name: Create a directory for rsync logs in {{ logpath }}/rsync
        ansible.builtin.file:
          path: "{{ logpath }}/rsync"
          state: directory
          owner: root
          group: rsync
          mode: '0775'

      - name: Create a directory for cronjob logs in {{ logpath }}/cron
        ansible.builtin.file:
          path: "{{ logpath }}/cron"
          state: directory
          owner: root
          group: rsync
          mode: '0775'

      - name: Create a directory for snap-sync-sleep logs in {{ logpath }}/sss
        ansible.builtin.file:
          path: "{{ logpath }}/sss"
          state: directory
          owner: root
          group: rsync
          mode: '0775'

      - name: Set up btrfs snapshots with btrbk
        tags: btrbk
        block:
          - name: Create the snapshot directory
            ansible.builtin.file:
              path: /mnt/data/truenas/snapshots
              state: directory
              mode: '0644'

          - name: Upload the config file
            ansible.builtin.template:
              src: ../templates/banas1/btrbk_config.j2
              dest: "/etc/btrbk/btrbk.conf"
              owner: root
              group: root
              mode: '0644'

      - name: Upload the rtcwake script
        tags: rtcwake
        ansible.builtin.template:
          src: ../templates/banas1/good_night.sh
          dest: "/usr/local/bin/good_night.sh"
          owner: "{{ rsync_user }}"
          group: rsync
          mode: '0770'

      - name: Upload the run_and_log script
        tags: run_and_log
        ansible.builtin.template:
          src: ../templates/banas1/run_and_log.sh.j2
          dest: "/usr/local/bin/run_and_log.sh"
          owner: "{{ rsync_user }}"
          group: rsync
          mode: '0770'      

      - name: Create a bash script containing all tasks
        tags: tasks
        block:

        - name: Create sss script - Head
          ansible.builtin.copy:
            dest: /usr/local/bin/snap_sync_sleep.sh
            content: |
              #!/bin/bash

              export PATH=/usr/local/bin:$PATH

              SECONDS=0          # reset counter at the start
              TIMESTAMP=$(date +%Y-%m-%d_%H-%M-%S)
              LOG_FILE="{{ logpath }}/sss/snap_sync_sleep_${TIMESTAMP}.log"

            owner: "{{ rsync_user }}"
            group: rsync
            mode: '0770'
          
        - name: Create sss script - Append snapshot task
          ansible.builtin.lineinfile:
            path: /usr/local/bin/snap_sync_sleep.sh
            line: 'run_and_log.sh "/usr/bin/btrbk -c /etc/btrbk/btrbk.conf run" "$LOG_FILE"'
            insertafter: EOF

        - name: Create sss script - Append rsync tasks
          ansible.builtin.lineinfile:
            path: /usr/local/bin/snap_sync_sleep.sh
            line: 'run_and_log.sh "/usr/local/bin/rsync_pull_job.sh {{ rsync_user }} {{ rsync_host }} {{ item.0 }} {{ item.1 }}" "$LOG_FILE"'
            insertafter: EOF      
          loop: "{{ rsync_source_paths | zip(rsync_destination_paths) | list }}"

        - name: Create sss script - Append RTC timer
          ansible.builtin.lineinfile:
            path: /usr/local/bin/snap_sync_sleep.sh
            line: 'run_and_log.sh "/usr/local/bin/good_night.sh {{wake_hour}} {{wake_minute}} >> $LOG_FILE 2>&1" "$LOG_FILE"'
            insertafter: EOF 

        - name: Create sss script - Tail
          ansible.builtin.blockinfile:
            path: /usr/local/bin/snap_sync_sleep.sh
            block: |
              # Calculate the runtime
              START=${TIMESTAMP}
              END=$(date +%Y-%m-%d_%H-%M-%S)

              duration=$SECONDS

              hours=$((duration / 3600))
              minutes=$(((duration % 3600) / 60))
              seconds=$((duration % 60))

              echo "Start: $START" | tee -a "$LOG_FILE"
              echo "End: $END" | tee -a "$LOG_FILE"
              echo "Total runtime: ${hours}h ${minutes}m ${seconds}s" | tee -a "$LOG_FILE"
            insertafter: EOF

        - name: Create a cron job for the tasks to run (sequentially)
          ansible.builtin.cron:
            name: "Snapshot - Rsync - Sleep"
            cron_file: /etc/cron.d/snap_sync_sleep
            day: "*"
            hour: "{{ tasks_hour }}"
            minute: "{{ tasks_minute }}"
            user: "{{ rsync_user }}"
            job: "sudo /usr/local/bin/snap_sync_sleep.sh"    


      - name: Add SSH fingerprint of the rsync source host to known hosts of {{ rsync_user }}
        ansible.builtin.known_hosts:
          name: "{{ rsync_host }}"
          key: "{{ lookup('pipe', 'ssh-keyscan -H ' + rsync_host) }}"
          path: "/home/{{rsync_user}}/.ssh/known_hosts"
          state: present

      - name: Add SSH fingerprint of the rsync source host to known hosts of root
        ansible.builtin.known_hosts:
          name: "{{ rsync_host }}"
          key: "{{ lookup('pipe', 'ssh-keyscan -H ' + rsync_host) }}"
          path: "/root/.ssh/known_hosts"
          state: present

      - name: Activate SMB share
        tags: smb_enable
        block:
          - name:  Upload smb.conf 
            ansible.builtin.template:
              src: ../templates/banas1/smb.conf.j2
              dest: /etc/samba/smb.conf

          - name: Add SMB user and password
            ansible.builtin.shell: "smbpasswd -s -a {{ smb_user }}"
            args:
              stdin: "{{ smb_password}}\n{{ smb_password }}"  

        notify: 
          - Enable samba
          - Restart samba           

      - name: Deactivate SMB share
        tags: smb_disable
        block:

        - name: Remove SMB user and password
          ansible.builtin.shell: "pdbedit -x {{ smb_user }}"
          #ignore_errors: true

        notify: Disable samba 


      - name: Fetch SSH public key
        ansible.builtin.slurp:
          src: "/home/{{ rsync_user }}/.ssh/id_rsa.pub"
        register: ssh_key_pub

      - name: Display SSH public key -> transfer to primary NAS
        ansible.builtin.debug:
          msg: "{{ ssh_key_pub['content'] | b64decode }}"


## TODO:
# - Set notifications 



  handlers:
  - name: Restart sshd
    ansible.builtin.service: 
      name: sshd 
      state: restarted

  - name: Restart samba
    ansible.builtin.service:
      name: smbd
      state: restarted

  - name: Enable samba
    ansible.builtin.service:
      name: smbd
      state: started

  - name: Disable samba
    ansible.builtin.service:
      name: smbd
      enabled: false # do not start service on boot
      state: stopped 