---
- name: Configure Backup NAS 1
  hosts: banas1
  gather_facts: true
  vars_files:
    - host_vars/banas1/secrets.yml
    - group_vars/all/secrets.yml
  become: true


  tasks:
      - name: Set timezone
        community.general.timezone:
          name: "{{ timezone }}"

      - name: Enable passwordless sudo for {{ ansible_user }}
        copy:
          dest: "/etc/sudoers.d/{{ ansible_user }}"
          content: "{{ ansible_user }} ALL=(ALL) NOPASSWD:ALL"
          owner: root
          group: root
          mode: 0440
          validate: /usr/sbin/visudo -csf %s

      - name: Upload SSH public key from localhost
        ansible.posix.authorized_key:
          user: "{{ ansible_user }}"
          state: present
          # key: "{{ lookup('file', lookup('env','HOME') + '/.ssh/id_rsa.pub') }}" # lookup key file in home dir of current user
          key: "{{ lookup('file', hostvars['localhost'].ssh_pub_key_path) }}"
          exclusive: yes  # remove all other non-specified keys from the authorized_keys file
        notify: 
          - Restart sshd

      - name: Configure root SSH access
        lineinfile:
          path: /etc/ssh/sshd_config
          regexp: "^PermitRootLogin"
          line: "PermitRootLogin {{ sshd_permit_root_login }}"
          state: present
        notify: 
          - Restart sshd

      - name: Configure SSH password authentication
        lineinfile:
          path: /etc/ssh/sshd_config
          regexp: "^PasswordAuthentication"
          line: "PasswordAuthentication {{ sshd_password_authentication }}"
          state: present
        notify: 
          - Restart sshd


      - name: Install additional packages
        ansible.builtin.apt:
          name: 
            #- hdparm   # install if APM is available on your drive
            - sdparm
            - smartmontools
            #- git
            #- make
            #- build-essential
            - postfix   # Message Transfer Agend (MTA) for logging cronjob output
            - samba
            - acl
            - snapper
          state: present


      - name: Upgrade packages
        ansible.builtin.apt:
          update_cache: yes
          upgrade: yes

      ## ToDo: Fix compilation of openSeaChest. Problem with 32-bit system

      # - name: Clone openSeaChest repository
      #   ansible.builtin.git:
      #     repo: "https://github.com/Seagate/openSeaChest.git"
      #     dest: "/root/openSeaChest"
      #     version: "HEAD"
      #     recursive: yes

      # - name: Compile openSeaChest (Seagate Utility for managing power saving on EPC supporting hdds)
      #   # https://forum.pine64.org/showthread.php?tid=7137
      #   ansible.builtin.shell: |
      #     cd /root/openSeaChest/Make/gcc && CXXFLAGS="-D_FILE_OFFSET_BITS=64" make release

      # - name: Move compiled openSeaChest
      #   ansible.builtin.shell: |
      #     mkdir -pv /opt/openSeaChest/bin && mv openseachest_exes/* /opt/openSeaChest/bin
      #     cd / && rm -rf /root/openSeaChest
      #     cat <<<'export PATH="$PATH:/opt/openSeaChest/bin"' >> /root/.bashrc


      ## Alternative EPC management tool: https://github.com/tyan-boot/wdepc
      ## Problem: Disk still spins down after some time
      - name: Check if wdepc command is available
        ansible.builtin.command:
          cmd: which wdepc
        register: result
        ignore_errors: yes

      - name: Install WDEPC if not available
        block:

        - name: Install WDEPC | Clone WDEPC repository
          ansible.builtin.git:
            repo: "https://github.com/tyan-boot/wdepc"
            dest: "$HOME/wdepc"

        - name: Install WDEPC | Install Rust compiler and Cargo
          ansible.builtin.shell: |
            curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y

        - name: Install WDEPC | Compile using Cargo
          ansible.builtin.shell: |
            $HOME/.cargo/bin/cargo build --release
          args:
            chdir: $HOME/wdepc

        - name: Install WDEPC | Copy wdepc to /usr/local/bin
          ansible.builtin.copy:
            src: $HOME/wdepc/target/release/wdepc
            dest: /usr/local/bin/wdepc
            mode: '0755'
            remote_src: yes

        - name: Install WDEPC | Remove source files
          ansible.builtin.file:
            path: $HOME/wdepc
            state: absent

        - name: Install WDEPC | Uninstall Rust
          ansible.builtin.command: $HOME/.cargo/bin/rustup self uninstall -y

        when: result.stdout == ""


      - name: Set WDEPC timers (spindown after 90 minutes)
        ansible.builtin.shell: |
          wdepc -d /dev/sda set-timer idle_a 600 --save --enable true
          wdepc -d /dev/sda set-timer idle_b 6000 --save --enable true
          wdepc -d /dev/sda set-timer idle_c 18000 --save --enable true
          wdepc -d /dev/sda set-timer standby_z 54000 --save --enable true

      ## Workaround to prevent disk spin down
      - name: Add periodic disk read operation to the cron tab
        ansible.builtin.cron:
          name: "Periodic disk read operation"
          minute: "*/9"
          user: root
          job: "dd if=/dev/sda of=/dev/null bs=512 count=1 iflag=direct"
      
      
      - name: Create a rsync group
        ansible.builtin.group:
          name: rsync
          state: present

      - name: Generate a user for the rsync connection
        ansible.builtin.user:
          name: banas1
          groups: banas1, rsync
          shell: /bin/bash
          create_home: yes
          generate_ssh_key: yes
          ssh_key_type: rsa
          ssh_key_bits: 3072
          ssh_key_file: .ssh/id_rsa
          force: no # yes: overwrites existing key

      - name: Enable passwordless sudo for banas1
        copy:
          dest: "/etc/sudoers.d/banas1"
          content: "banas1 ALL=(ALL) NOPASSWD:ALL"
          owner: root
          group: root
          mode: 0440
          validate: /usr/sbin/visudo -csf %s


      - name: Set ownership and permissions for the mounted drive
        ansible.builtin.file:
          path: "{{ mount_point }}"
          owner: root
          group: rsync
          mode: "0775"

      - name: Create btrfs subvolumes
        community.general.btrfs_subvolume:
          name: "{{ item }}"
        loop: "{{ btrfs_subvolumes }}"

      - name: Set ownership and permissions for btrfs subvolumes
        ansible.builtin.file:
          path: "{{ mount_point }}/{{ item }}"
          owner: root
          group: rsync
          mode: "0775"
        loop: "{{ btrfs_subvolumes }}"

      - name: Create btrfs snapshot subvolume
        community.general.btrfs_subvolume:
          name: "{{ btrfs_snapshot_path }}"

      - name: Set ownership and permissions for snapshot subvolume
        ansible.builtin.file:
          path: "{{ mount_point }}/{{ btrfs_snapshot_path }}"
          owner: root
          group: rsync
          mode: "0755"

      - name: Upload btrfs snapshot script
        ansible.builtin.template:
          src: templates/btrfs_snapshot.sh
          dest: /usr/local/bin/btrfs_snapshot.sh
          owner: banas1
          group: rsync
          mode: '0770'

      - name: Create a directory for btrfs snapshot logs in /var/log
        ansible.builtin.file:
          path: /var/log/btrfs
          state: directory
          owner: root
          group: rsync
          mode: '0774'

      - name: Upload rsync job script
        ansible.builtin.template:
          src: templates/rsync_pull_job.sh
          dest: /usr/local/bin/rsync_pull_job.sh
          owner: banas1
          group: rsync
          mode: '0770'

      - name: Create a directory for rsync logs in /var/log
        ansible.builtin.file:
          path: /var/log/rsync
          state: directory
          owner: root
          group: rsync
          mode: '0774'

      - name: Create a directory for cronjob logs in /var/log
        ansible.builtin.file:
          path: /var/log/cron
          state: directory
          owner: root
          group: root
          mode: '0771'

      - name: Create a cron job for btrfs snapshots
        ansible.builtin.cron:
          name: "Btrfs Snapshot for {{ item.0 }}"
          hour: "{{ item.1 }}"
          minute: 59
          user: "{{ rsync_user }}"
          job: "sudo /usr/local/bin/btrfs_snapshot.sh {{ mount_point }}/{{ item.0 }} {{ mount_point }}/{{ btrfs_snapshot_path }} >>/var/log/cron/btrfs_snapshot_{{ item.0 | basename }} 2>&1"
        loop: "{{ btrfs_subvolumes | zip(btrfs_snapshot_hours) | list }}"

      - name: Create a cron job for rsync tasks
        ansible.builtin.cron:
          name: "Rsync pull from {{ item.0 }}"
          hour: "{{ item.2 }}"
          minute: 0
          user: "{{ rsync_user }}"
          job: "sudo /usr/local/bin/rsync_pull_job.sh {{ rsync_user }} {{ rsync_host }} {{ item.0 }} {{ item.1 }}"
        loop: "{{ rsync_source_paths | zip(rsync_destination_paths, rsync_hours) | list }}"

      - name: Configure Snapper for each btrfs subvolume
        tags: snapper_config
        include_tasks: snapper.yml
        vars:
          config.name: "{{ item | basename }}"
          config.path: "{{ [mount_point, item] | path_join }}"
        loop: "{{ btrfs_subvolumes }}"

      - name: Get existing snapper configurations
        ansible.builtin.shell: snapper list-configs
        register: snapper_configs

      - name: List existing snapper configurations
        ansible.builtin.debug:
          var: snapper_configs 


      - name: Activate SMB shares and grant ACL permissions
        tags: smb_enable
        block:
  
        - name: Configure smb.conf for samba share
          ansible.builtin.template:
            src: templates/smb.conf.j2
            dest: /etc/samba/smb.conf

        - name: Add SMB user and password
          ansible.builtin.shell: "smbpasswd -s -a {{ smb_user }}"
          args:
            stdin: "{{ smb_password}}\n{{ smb_password }}"

        - name: Configure ACLs for admin access to SMB shares
          ansible.posix.acl:
            path: /mnt/data
            entity: "{{ smb_user }}"
            etype: user
            permissions: rx
            recursive: true
            state: present

        notify: 
          - Enable samba
          - Restart samba

      - name: Deactivate SMB shares and remove ACL permissions
        tags: smb_disable
        block:

        - name: Remove SMB user and password
          ansible.builtin.shell: "smbpasswd -s -x {{ smb_user }}"
          ignore_errors: true
        
        - name: Remove ACLs for admin access to SMB shares
          ansible.posix.acl:
            path: /mnt/data
            entity: "{{ smb_user }}"
            etype: user
            recursive: true
            state: absent  

        notify: Disable samba 

      - name: Fetch SSH public key
        ansible.builtin.slurp:
          src: /home/banas1/.ssh/id_rsa.pub
        register: ssh_key_pub

      - name: Display SSH public key -> transfer to primary NAS
        ansible.builtin.debug:
          msg: "{{ ssh_key_pub['content'] | b64decode }}"


## TODO:
# - how to preserve file ownership with rsync (maybe must run task as root)
# - email results of snapshots and rsync
# - only run rsync if previous snapshot was sucessful
# - check directory permissions and restrict if possible
# - check permissions of rsynced files
# - check restore of btrfs snapshot





  handlers:
  - name: Restart sshd
    ansible.builtin.service: 
      name: sshd 
      state: restarted

  - name: Restart samba
    ansible.builtin.service:
      name: smbd
      state: restarted

  - name: Enable samba
    ansible.builtin.service:
      name: smbd
      state: started

  - name: Disable samba
    ansible.builtin.service:
      name: smbd
      enabled: false # do not start service on boot
      state: stopped 