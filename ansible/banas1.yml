---
- name: Configure Backup NAS 1
  hosts: banas1
  gather_facts: true
  vars_files:
    - host_vars/banas1/secrets.yml
    - group_vars/all/secrets.yml
  become: true


  tasks:
      - name: Set timezone
        community.general.timezone:
          name: "{{ timezone }}"

      - name: Enable passwordless sudo for {{ ansible_user }}
        copy:
          dest: "/etc/sudoers.d/{{ ansible_user }}"
          content: "{{ ansible_user }} ALL=(ALL) NOPASSWD:ALL"
          owner: root
          group: root
          mode: 0440
          validate: /usr/sbin/visudo -csf %s

      - name: Upload SSH public key from localhost
        ansible.posix.authorized_key:
          user: "{{ ansible_user }}"
          state: present
          # key: "{{ lookup('file', lookup('env','HOME') + '/.ssh/id_rsa.pub') }}" # lookup key file in home dir of current user
          key: "{{ lookup('file', hostvars['localhost'].ssh_pub_key_path) }}"
          exclusive: yes  # remove all other non-specified keys from the authorized_keys file
        notify: 
          - Restart sshd

      - name: Configure root SSH access
        lineinfile:
          path: /etc/ssh/sshd_config
          regexp: "^PermitRootLogin"
          line: "PermitRootLogin {{ sshd_permit_root_login }}"
          state: present
        notify: 
          - Restart sshd

      - name: Configure SSH password authentication
        lineinfile:
          path: /etc/ssh/sshd_config
          regexp: "^PasswordAuthentication"
          line: "PasswordAuthentication {{ sshd_password_authentication }}"
          state: present
        notify: 
          - Restart sshd


      - name: Install additional packages
        ansible.builtin.apt:
          name: 
            - postfix   # Message Transfer Agend (MTA) for logging cronjob output
            - samba
            - acl
            - btrbk
            - util-linux # for RTC wake
          state: present


      - name: Upgrade packages
        ansible.builtin.apt:
          update_cache: yes
          upgrade: yes

      ## Workaround to prevent disk spin down
      - name: Add periodic disk read operation to the cron tab
        ansible.builtin.cron:
          name: "Periodic disk read operation"
          minute: "*/9"
          user: root
          job: "dd if=/dev/sda of=/dev/null bs=512 count=1 iflag=direct"
      
      
      - name: Create a rsync group
        ansible.builtin.group:
          name: rsync
          state: present

      - name: Generate a user for the rsync connection
        ansible.builtin.user:
          name: banas1
          groups: rsync
          shell: /bin/bash
          create_home: yes
          generate_ssh_key: yes
          ssh_key_type: rsa
          ssh_key_bits: 3072
          ssh_key_file: .ssh/id_rsa
          force: no # yes: overwrites existing key

      - name: Enable passwordless sudo for banas1
        copy:
          dest: "/etc/sudoers.d/banas1"
          content: "banas1 ALL=(ALL) NOPASSWD:ALL"
          owner: root
          group: root
          mode: 0440
          validate: /usr/sbin/visudo -csf %s


      - name: Set ownership and permissions for the mounted drive
        ansible.builtin.file:
          path: "{{ mount_point }}"
          owner: root
          group: rsync
          mode: "0775"

      - name: Create btrfs subvolumes
        community.general.btrfs_subvolume:
          name: "{{ item }}"
          #recursive: true
        loop: "{{ btrfs_subvolumes }}"

      - name: Set ownership and permissions for btrfs subvolumes
        ansible.builtin.file:
          path: "{{ mount_point }}/{{ item }}"
          owner: root
          group: rsync
          mode: "0775"
        loop: "{{ btrfs_subvolumes }}"

      - name: Upload rsync job script
        ansible.builtin.template:
          src: templates/rsync_pull_job.sh
          dest: /usr/local/bin/rsync_pull_job.sh
          owner: banas1
          group: rsync
          mode: '0770'

      - name: Create a directory for rsync logs in /var/log
        ansible.builtin.file:
          path: /var/log/rsync
          state: directory
          owner: root
          group: rsync
          mode: '0774'

      - name: Create a directory for cronjob logs in /var/log
        ansible.builtin.file:
          path: /var/log/cron
          state: directory
          owner: root
          group: rsync
          mode: '0771'

      - name: Create a directory for snap-sync-sleep logs in /var/log
        ansible.builtin.file:
          path: /var/log/sss
          state: directory
          owner: root
          group: rsync
          mode: '0771'

      # - name: Create a cron job for rsync tasks
      #   ansible.builtin.cron:
      #     name: "Rsync pull from {{ item.0 }}"
      #     cron_file: /etc/cron.d/rsync
      #     day: "*"
      #     hour: "{{ item.2 }}"
      #     minute: 0
      #     user: "{{ rsync_user }}"
      #     job: "sudo /usr/local/bin/rsync_pull_job.sh {{ rsync_user }} {{ rsync_host }} {{ item.0 }} {{ item.1 }}"
      #   loop: "{{ rsync_source_paths | zip(rsync_destination_paths, rsync_hours) | list }}"


      - name: Set up btrfs snapshots with btrbk
        tags: btrbk
        block:
          - name: Create the snapshot directory
            ansible.builtin.file:
              path: /mnt/data/truenas/snapshots
              state: directory
              mode: '0644'

          - name: Upload the config file
            ansible.builtin.template:
              src: templates/btrbk_config.j2
              dest: "/etc/btrbk/btrbk.conf"
              owner: root
              group: root
              mode: '0644'

          # - name: Create a cron job file for btrbk snapshots
          #   ansible.builtin.cron:
          #     name: "Btrbk periodic snapshots"
          #     cron_file: /etc/cron.d/btrbk
          #     day: "*"
          #     hour: "*/1"
          #     minute: "0"
          #     user: "root"
          #     job: "exec /usr/bin/btrbk -c /etc/btrbk/btrbk.conf run"

      - name: Upload the rtcwake script
        ansible.builtin.template:
          src: templates/good_night.j2
          dest: "/usr/local/bin/good_night.sh"
          owner: banas1
          group: rsync
          mode: '0770'

      - name: Create a bash script containing all tasks
        tags: tasks
        block:

        - name: Setup logging
          ansible.builtin.blockinfile:
            path: /usr/local/bin/snap_sync_sleep.sh
            block: |
              #!/bin/bash

              LOG_FILE="/var/log/sss/snap_sync_sleep_$(date +%Y-%m-%d_%H-%M-%S).log"

              log() {
                  echo "[$(date '+%Y-%m-%d %H:%M:%S')] $1" | tee -a "$LOG_FILE"
              }

              run_and_log() {
                  CMD="$1"
                  log "Running: $CMD"
                  eval "$CMD"
                  STATUS=$?
                  if [ $STATUS -eq 0 ]; then
                      log "Success: '$CMD' exited with code 0"
                  else
                      log "Error: '$CMD' exited with code $STATUS"
                  fi
                  echo "" >> "$LOG_FILE"
              }
            append_newline: true
            prepend_newline: true
            create: true
            owner: banas1
            group: rsync
            mode: '0770'
            insertbefore: BOF
          
        - name: Append snapshot task
          ansible.builtin.lineinfile:
            path: /usr/local/bin/snap_sync_sleep.sh
            line: 'run_and_log "sudo /usr/bin/btrbk -c /etc/btrbk/btrbk.conf run"'
            insertafter: EOF

        - name: Append rsync tasks
          ansible.builtin.lineinfile:
            path: /usr/local/bin/snap_sync_sleep.sh
            line: 'run_and_log "sudo /usr/local/bin/rsync_pull_job.sh {{ rsync_user }} {{ rsync_host }} {{ item.0 }} {{ item.1 }}"'
            insertafter: EOF      
          loop: "{{ rsync_source_paths | zip(rsync_destination_paths, rsync_hours) | list }}"

        - name: Append RTC timer
          ansible.builtin.lineinfile:
            path: /usr/local/bin/snap_sync_sleep.sh
            line: 'run_and_log "sudo /usr/local/bin/good_night.sh"'
            insertafter: EOF 

        - name: Create a cron job for the tasks to run (sequentially)
          ansible.builtin.cron:
            name: "Snapshot - Rsync - Sleep"
            cron_file: /etc/cron.d/srs
            day: "*"
            hour: "{{ tasks_hour }}"
            minute: "{{ tasks_minute }}"
            user: "banas1"
            job: "/usr/local/bin/snap_sync_sleep.sh"       
      


      - name: Activate SMB share
        tags: smb_enable
        block:
          - name:  Upload smb.conf 
            ansible.builtin.template:
              src: templates/smb.conf.j2
              dest: /etc/samba/smb.conf

          - name: Add SMB user and password
            ansible.builtin.shell: "smbpasswd -s -a {{ smb_user }}"
            args:
              stdin: "{{ smb_password}}\n{{ smb_password }}"  

        notify: 
          - Enable samba
          - Restart samba           

      - name: Deactivate SMB share
        tags: smb_disable
        block:

        - name: Remove SMB user and password
          ansible.builtin.shell: "pdbedit -x {{ smb_user }}"
          #ignore_errors: true

        notify: Disable samba 


      - name: Fetch SSH public key
        ansible.builtin.slurp:
          src: /home/banas1/.ssh/id_rsa.pub
        register: ssh_key_pub

      - name: Display SSH public key -> transfer to primary NAS
        ansible.builtin.debug:
          msg: "{{ ssh_key_pub['content'] | b64decode }}"


## TODO:
# - email results of snapshots and rsync



  handlers:
  - name: Restart sshd
    ansible.builtin.service: 
      name: sshd 
      state: restarted

  - name: Restart samba
    ansible.builtin.service:
      name: smbd
      state: restarted

  - name: Enable samba
    ansible.builtin.service:
      name: smbd
      state: started

  - name: Disable samba
    ansible.builtin.service:
      name: smbd
      enabled: false # do not start service on boot
      state: stopped 